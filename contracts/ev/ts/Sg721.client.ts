/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, PlugType, Location, QueryMsg, TransferStatus, MigrateMsg, ChargerStatus, AllEnergyTransferOffersResponse, EnergyTransferOffer, Timestamp, Uint64, AllEnergyTransfersResponse, EnergyTransfer, DenomResponse, EnergyTransferResponse, EnergyTransferOfferResponse, EnergyTransferOffersByOwnerResponse, EnergyTransfersByOwnerResponse, OwnEnergyTransfersResponse } from "./Sg721.types";
export interface Sg721ReadOnlyInterface {
  contractAddress: string;
  denom: () => Promise<DenomResponse>;
  energyTransferOffer: ({
    id
  }: {
    id: number;
  }) => Promise<EnergyTransferOfferResponse>;
  allEnergyTransferOffers: () => Promise<AllEnergyTransferOffersResponse>;
  energyTransfer: ({
    id
  }: {
    id: number;
  }) => Promise<EnergyTransferResponse>;
  allEnergyTransfers: () => Promise<AllEnergyTransfersResponse>;
  energyTransferOffers: ({
    owner
  }: {
    owner: string;
  }) => Promise<EnergyTransferOffersByOwnerResponse>;
  ownEnergyTransfers: ({
    driver,
    transferStatus
  }: {
    driver: string;
    transferStatus: TransferStatus;
  }) => Promise<OwnEnergyTransfersResponse>;
  energyTransfers: ({
    owner
  }: {
    owner: string;
  }) => Promise<EnergyTransfersByOwnerResponse>;
}
export class Sg721QueryClient implements Sg721ReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.denom = this.denom.bind(this);
    this.energyTransferOffer = this.energyTransferOffer.bind(this);
    this.allEnergyTransferOffers = this.allEnergyTransferOffers.bind(this);
    this.energyTransfer = this.energyTransfer.bind(this);
    this.allEnergyTransfers = this.allEnergyTransfers.bind(this);
    this.energyTransferOffers = this.energyTransferOffers.bind(this);
    this.ownEnergyTransfers = this.ownEnergyTransfers.bind(this);
    this.energyTransfers = this.energyTransfers.bind(this);
  }

  denom = async (): Promise<DenomResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      denom: {}
    });
  };
  energyTransferOffer = async ({
    id
  }: {
    id: number;
  }): Promise<EnergyTransferOfferResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      energy_transfer_offer: {
        id
      }
    });
  };
  allEnergyTransferOffers = async (): Promise<AllEnergyTransferOffersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_energy_transfer_offers: {}
    });
  };
  energyTransfer = async ({
    id
  }: {
    id: number;
  }): Promise<EnergyTransferResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      energy_transfer: {
        id
      }
    });
  };
  allEnergyTransfers = async (): Promise<AllEnergyTransfersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_energy_transfers: {}
    });
  };
  energyTransferOffers = async ({
    owner
  }: {
    owner: string;
  }): Promise<EnergyTransferOffersByOwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      energy_transfer_offers: {
        owner
      }
    });
  };
  ownEnergyTransfers = async ({
    driver,
    transferStatus
  }: {
    driver: string;
    transferStatus: TransferStatus;
  }): Promise<OwnEnergyTransfersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      own_energy_transfers: {
        driver,
        transfer_status: transferStatus
      }
    });
  };
  energyTransfers = async ({
    owner
  }: {
    owner: string;
  }): Promise<EnergyTransfersByOwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      energy_transfers: {
        owner
      }
    });
  };
}
export interface Sg721Interface extends Sg721ReadOnlyInterface {
  contractAddress: string;
  sender: string;
  publishEnergyTransferOffer: ({
    chargerId,
    location,
    name,
    plugType,
    tariff
  }: {
    chargerId: string;
    location: Location;
    name: string;
    plugType: PlugType;
    tariff: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeEnergyOffer: ({
    energyOfferId
  }: {
    energyOfferId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  startEnergyTransfer: ({
    driver,
    energyToTransfer,
    energyTransferOfferId
  }: {
    driver: string;
    energyToTransfer: number;
    energyTransferOfferId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  energyTransferStarted: ({
    energyTransferId
  }: {
    energyTransferId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  energyTransferCompleted: ({
    energyTransferId,
    usedServiceUnits
  }: {
    energyTransferId: number;
    usedServiceUnits: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  cancelEnergyTransfer: ({
    energyTransferId
  }: {
    energyTransferId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeEnergyTransfer: ({
    energyTransferId
  }: {
    energyTransferId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class Sg721Client extends Sg721QueryClient implements Sg721Interface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.publishEnergyTransferOffer = this.publishEnergyTransferOffer.bind(this);
    this.removeEnergyOffer = this.removeEnergyOffer.bind(this);
    this.startEnergyTransfer = this.startEnergyTransfer.bind(this);
    this.energyTransferStarted = this.energyTransferStarted.bind(this);
    this.energyTransferCompleted = this.energyTransferCompleted.bind(this);
    this.cancelEnergyTransfer = this.cancelEnergyTransfer.bind(this);
    this.removeEnergyTransfer = this.removeEnergyTransfer.bind(this);
  }

  publishEnergyTransferOffer = async ({
    chargerId,
    location,
    name,
    plugType,
    tariff
  }: {
    chargerId: string;
    location: Location;
    name: string;
    plugType: PlugType;
    tariff: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      publish_energy_transfer_offer: {
        charger_id: chargerId,
        location,
        name,
        plug_type: plugType,
        tariff
      }
    }, fee, memo, _funds);
  };
  removeEnergyOffer = async ({
    energyOfferId
  }: {
    energyOfferId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_energy_offer: {
        energy_offer_id: energyOfferId
      }
    }, fee, memo, _funds);
  };
  startEnergyTransfer = async ({
    driver,
    energyToTransfer,
    energyTransferOfferId
  }: {
    driver: string;
    energyToTransfer: number;
    energyTransferOfferId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      start_energy_transfer: {
        driver,
        energy_to_transfer: energyToTransfer,
        energy_transfer_offer_id: energyTransferOfferId
      }
    }, fee, memo, _funds);
  };
  energyTransferStarted = async ({
    energyTransferId
  }: {
    energyTransferId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      energy_transfer_started: {
        energy_transfer_id: energyTransferId
      }
    }, fee, memo, _funds);
  };
  energyTransferCompleted = async ({
    energyTransferId,
    usedServiceUnits
  }: {
    energyTransferId: number;
    usedServiceUnits: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      energy_transfer_completed: {
        energy_transfer_id: energyTransferId,
        used_service_units: usedServiceUnits
      }
    }, fee, memo, _funds);
  };
  cancelEnergyTransfer = async ({
    energyTransferId
  }: {
    energyTransferId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_energy_transfer: {
        energy_transfer_id: energyTransferId
      }
    }, fee, memo, _funds);
  };
  removeEnergyTransfer = async ({
    energyTransferId
  }: {
    energyTransferId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_energy_transfer: {
        energy_transfer_id: energyTransferId
      }
    }, fee, memo, _funds);
  };
}